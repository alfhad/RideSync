// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  hashedPassword  String
  phone           String
  role            UserRole @default(USER)
  currentLocation Json // GeoJSON ( { type: "Point", coordinates: [longitude, latitude] } )
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  socialLinks     Json? // Social links of the user for example: { twitter: "https://twitter.com/username", linkedin: "https://linkedin.com/in/username" }

  AdminRequest AdminRequest?
  Ride         Ride[]
  JoinRequests RideJoinRequest[]
}

model AdminRequest {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  userId          String             @unique @db.ObjectId
  reason          String // Reason for requesting admin access
  experience      String? // Experience in the field
  socialProof     String? // Social proof of experience
  status          AdminRequestStatus @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  rejectionReason String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ride {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  createdBy     String     @db.ObjectId // Refers to the admin who created the ride
  title         String
  description   String?
  startLocation Json // GeoJSON ( { type: "Point", coordinates: [longitude, latitude] } )
  endLocation   Json // Latitude & Longitude
  startTime     DateTime
  startDate     DateTime
  rideDuration  Int // Days
  status        RideStatus @default(UPCOMING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  joinedUsers   String[]   @db.ObjectId

  Admin        User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  JoinRequests RideJoinRequest[]
}

model RideJoinRequest {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  rideId    String            @db.ObjectId
  userId    String            @db.ObjectId
  status    JoinRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  Ride Ride @relation(fields: [rideId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rideId]) // Ensures a user cannot request to join the same ride multiple times
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum AdminRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RideStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELED
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}
